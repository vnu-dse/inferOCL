/* $Id:$ 
 * Creation : March 26, 2009
 * Licence  : EPL 
 * Copyright:
 * Authors  : 
 *            sagarsen
 */
package kermeta::language::structure;

require kermeta

using kermeta::standard
using kermeta::utils

using kermeta::language::structure

aspect class Property
{
	//Determine if a property is constrained
	operation  isConstrained():Boolean is do
		//result:=true
		//For the moment
		result:=false
	end
	//Determine if used in a transformation
	
	operation isTransformed():Boolean is do
		//result:=true
		//For the moment
		result:=false
	end
}

aspect class ClassDefinition
{
	//Determine if class is used in an invariant
	operation isConstrained():Boolean is do
		//result:=true
		//For the moment
		result:=false
	end
	
	operation allSuperTypes() : Set<Type> is do
          var allSuperClasses : Set<Type> init Set<Type>.new
      var superClasses : Set<Type> init Set<Type>.new
      superClasses.addAll(self.superType)
            from  not superClasses.isEmpty
      until superClasses.isEmpty
      loop
          allSuperClasses.addAll(superClasses)
          var temp : Set<Type> init Set<Type>.new
           superClasses.each{ s |
               if s.isInstanceOf(ParameterizedType) then
                  if s.asType(ParameterizedType).typeDefinition.isInstanceOf(ClassDefinition) then
                      temp.addAll(s.asType(ParameterizedType).typeDefinition.asType(ClassDefinition).superType)
                  end
              end
           }
           superClasses.clear()
           superClasses.addAll(temp)
      end
            result := allSuperClasses
  	end
}
